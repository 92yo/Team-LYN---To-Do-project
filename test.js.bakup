var todoFunctions = require("./logic");
// Constants for testing purposes
const requiredKeys = ["id", "description", "done"];

const makeTea = {
  id: 2,
  description: "make tea",
  done: false
};

const toDoArray = [
  {
  id: 0,
  description: "Make breakfast",
  done: false
  },
  {
  id: 1,
  description: "Do the dishes",
  done: true
  },
  {
  id: 2,
  description: "make tea",
  done: false
  }
  ];
  const toDoArraySorted = [
  {
  id: 0,
  description: "Make breakfast",
  done: false
  },
  {
  id: 1,
  description: "Do the dishes",
  done: false
  },
  {
  id: 2,
  description: "make tea",
  done: true
  }
  ];

describe("Example test", function() {
  it("should do something", function() {
    expect(1).toBe(1);
  });
});
/*************************   addTodo tests        ***********************/
describe("addTodo tests ", function() {
  it("should have a new copy of new to-do at the end", function() {
    const result = todoFunctions.addTodo(toDoArray, makeTea);
    const actual = makeTea;
    expect(result[result.length - 1]).toEqual(actual);
  });
  it("should not change the original input toDoArray", function() {
    const result = todoFunctions.addTodo(toDoArray, makeTea);
    const actual = toDoArray;
    expect(result).not.toBe(actual);
  });
  it("should not change the original new todo", function() {
    const result = todoFunctions.addTodo(toDoArray, makeTea)[toDoArray.length];
    const actual = makeTea;
    expect(makeTea).toBe(actual);
  });
  it("should have id,description,done keys", function() {
    const result = todoFunctions.addTodo(toDoArray, {
      description: "An object with description only"
    })[toDoArray.length];
    const resultKeys = Object.keys(result);
    const actual = requiredKeys;
    expect(resultKeys).toEqual(actual);
  });
});

/*************************   deleteToDo tests        ***********************/
describe("deleteTodo test", function() {
  it("should be able to delete the first item", function() {
    const result = todoFunctions.deleteTodo(toDoArray, 0);
    const actual = toDoArray[0];
    expect(result).not.toContain(actual);
  });

  it("should not change the original input todos", function() {
    const result = todoFunctions.deleteTodo(toDoArray, 0);
    const actual = toDoArray;
    expect(result).not.toBe(actual);
  });
});

///***********************        markTodo test       ********************/
describe("markTodo tests ", function() {
  it("should return a new array", function() {
    const result = todoFunctions.markTodo(toDoArray, 0);
    const actual = toDoArray;
    expect(result).not.toBe(actual);
  });

  it("should not modify done on the original todos", function() {
    const actual = toDoArray[0].done;
    const result = todoFunctions.markTodo(toDoArray, 0)[0].done;
    expect(result).not.toBe(actual);
  });

  it("should have toggled done for the target todo", function() {
    const result = todoFunctions.markTodo(toDoArray, 0)[0].done;
    const actual = !toDoArray[0].done;
    expect(result).toBe(actual);
  });

  it("should not toggle other todos", function() {
    const result = todoFunctions.markTodo(toDoArray, 1)[0].done;
    const actual = toDoArray[0].done;
    expect(result).toBe(actual);
  });
});

///* SortTodos test **/
describe("sortTodos tests ", function() {
  it("should not modify done on the original todos", function() {
  const actual = toDoArray;
  const result = todoFunctions.sortTodos(toDoArray, (a, b) =>
  !a.done ? (!b.done ? 0 : -1) : b.done ? 0 : 1)
  expect(result).not.toBe(actual);
  });
  it("should not modify done on the original todos", function() {
    const actual = toDoArraySorted;
    const result = todoFunctions.sortTodos(toDoArraySorted, (a, b) =>
    !a.done ? (!b.done ? 0 : -1) : b.done ? 0 : 1)
    expect(result).toEqual(actual);
  });
})